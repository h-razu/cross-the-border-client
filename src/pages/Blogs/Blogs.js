import React from 'react';
import useTitle from '../../Hook/TitleHook/TitleHooks';

const Blogs = () => {
    useTitle("Blogs")
    return (
        <div>
            <div className="card w-full bg-white shadow-xl my-2">
                <div className="card-body">
                    <h2 className="card-title font-bold">Difference between SQL and NoSQL?</h2>
                    <p className='text-justify'>
                        SQL is recognizable, documented, and widely-used. Safe and versatile, it’s particularly well suited for complex queries. However, SQL restricts the user to working within a predefined tabular schema, and more care must be taken to organize and understand the data before it is used.
                    </p>
                    <p className='text-justify'>
                        The dynamic schemata of NoSQL databases allow representation of alternative structures, often alongside each other, encouraging greater flexibility. There is less emphasis on planning, greater freedom when adding new attributes or fields, and the possibility of varied syntax across databases. As a group, however, NoSQL languages lack the standard interface which SQL provides, so more complex queries can be difficult to execute.
                    </p>
                    <p className='text-justify'>
                        SQL database schemata always represent relational, tabular data, with rules about consistency and integrity. They contain tables with columns (attributes) and rows (records), and keys have constrained logical relationships.
                    </p>
                    <div className='text-justify'>
                        NoSQL databases need not stick to this format, but generally fit into one of four broad categories:
                        <ul className='list-disc ml-4'>
                            <li>Column-oriented</li>
                            <li>Key-Value</li>
                            <li>Document</li>
                            <li>Graph</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div className="card w-full bg-white shadow-xl my-2">
                <div className="card-body">
                    <h2 className="card-title font-bold">What is JWT, and how does it work?</h2>
                    <p className='text-justify'>Traditionally we have been using a cookie-based authentication mechanism to manage sessions.  A token-based authentication mechanism is much more beneficial in cases where your application acts as an identity provider for multiple other applications. This approach is also very famous in APIs first designs and Mobile Apps. JWT is a standard based token, this means that any application/language can generate a JWT token using these standards. There are special libraries for each of them.  In a token-based approach, a single token is used and sent to the server along with every request.</p>
                    <p className='text-justify'>
                        JWT consists of three parts separated by “.” (dot).
                        <br />
                        [ header ].[ Payload ].[ Signature ]
                    </p>
                    <p className='text-justify'>
                        The first segment contains the standard claims required for JWT like token type, the algorithm used to sign the signature.
                    </p>
                    <p className='text-justify'>
                        The second segment called as payload can be used to set the custom claims along with some standard information like time issued at and expiration time, these are just key-value pairs and can be anything like the email address, user’s role or location etc. it is up to the application how they want to use it later along with the authentication and what all custom headers they want to set to their tokens.
                    </p>
                    <p className='text-justify'>
                        The first two parts are publicly visible and not encrypted, they are just encoded using some encoding techniques. The third part which is to ensure the token integrity is signed and can not be viewed until unless you provide the same secret key which you used to generate this token. The signature is generated by signing the hash of claims in the first segment & hash of payload (custom claims) in the second segment of the token with a secret key. Multiple algorithms can be used to create this signature. The information about the algorithm used is also embedded in the first part of the token so that this can be validated on the server side when requests are made.
                    </p>
                    <div className='text-justify'>
                        JWT in HTTP request can be done primarily in following three ways:-

                        <ul className='list-decimal ml-4'>
                            <li>Send with a form post in a hidden field</li>
                            <li>Send in as a request parameter in the URL</li>
                            <li>sending it along with the header information</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div className="card w-full bg-white shadow-xl my-2">
                <div className="card-body">
                    <h2 className="card-title font-bold">What is the difference between JavaScript and NodeJS?</h2>
                    <div className='text-justify'>
                        <span className='font-semibold mr-1'>JavaScript: </span>
                        Javascript is a Scripting language. It is mostly abbreviated as JS. It can be said that Javascript is the updated version of the ECMA script. Javascript is a high-level programming language that uses the concept of OOPs but it is based on prototype inheritance.
                        <ul>
                            <li>It is basically used on the client-side.</li>
                            <li>Javascript is capable enough to add HTML and play with the DOM. </li>
                            <li>Javascript can run in any browser engine as like JS core in safari and Spider monkey in Firefox. </li>
                            <li>Javascript is used in frontend development.</li>
                        </ul>
                    </div>
                    <div className='text-justify'>
                        <span className='font-semibold mr-1'>Node.JS:</span>NodeJS is a cross-platform and open source Javascript runtime environment that allows the javascript to be run on the server-side. Nodejs allows Javascript code to run outside the browser. Nodejs comes with a lot of modules and mostly used in web development.
                        <ul>
                            <li>It is mostly used on the server-side.</li>
                            <li>Nodejs does not have capability to add HTML tags.</li>
                            <li>V8 is the Javascript engine inside of node.js that parses and runs Javascript. </li>
                            <li>Nodejs is used in server-side development.</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div className="card w-full bg-white shadow-xl my-2">
                <div className="card-body">
                    <h2 className="card-title font-bold">How does NodeJS handle multiple requests at the same time?</h2>
                    <p className='text-justify'>
                        NodeJS receives multiple client requests and places them into EventQueue. NodeJS is built with the concept of event-driven architecture. NodeJS has its own EventLoop which is an infinite loop that receives requests and processes them. EventLoop is the listener for the EventQueue.
                    </p>
                    <p className='text-justify'>
                        If NodeJS can process the request without I/O blocking then the event loop would itself process the request and sends the response back to the client by itself. But, it is possible to process multiple requests parallel using the NodeJS cluster module or worker_threads module.
                    </p>
                </div>
            </div>
        </div>
    );
};

export default Blogs;